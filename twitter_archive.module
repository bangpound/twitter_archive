<?php

/**
 * Implements hook_twitter_status_save().
 */
function twitter_archive_twitter_status_save($status) {
  module_load_include('inc', 'twitter');
  module_load_include('inc', 'twitter_archive');
  $is_auth = FALSE;

  // Prefer to load tweets with their authors' credentials.
  $twitter_uid = db_select('twitter_account')
    ->fields('twitter_account', array('twitter_uid'))
    ->condition('screen_name', $status->user->screen_name)
    ->execute()
    ->fetchField();
  $is_auth = twitter_archive_account_is_auth($twitter_uid);

  // Tweets being saved may be mentions, in which case we have credentials for
  // in_reply_to_user_id.
  if (!$is_auth) {
    $twitter_uid = $status->in_reply_to_user_id;
    $is_auth = twitter_archive_account_is_auth($twitter_uid);
  }

  // Archive requests a status ID with specific credentials if available. This array
  // becomes the record that is saved in the archive table. If there is no authenticated
  // for making the request, the request will be anonymous and unauthenticated.
  $record = array(
    'id' => $status->id,
    'twitter_uid' => $is_auth ? (int) $twitter_uid : 0,
  );

  $update = db_select('twitter_archive', 'ta')
    ->condition('id', $record['id'])
    ->countQuery()
    ->execute()
    ->fetchField();

  if (!$update) {
    $queue = DrupalQueue::get('twitter_archive');
    $queue->createItem($record);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function twitter_archive_cron_queue_info() {
  $queues['twitter_archive'] = array(
    'worker callback' => 'twitter_archive',
  );
  return $queues;
}

/**
 * Cron queue worker callback.
 */
function twitter_archive($record) {
  $update = db_select('twitter_archive', 'ta')
    ->condition('id', $record['id'])
    ->countQuery()
    ->execute()
    ->fetchField();

  if (!$update) {
    module_load_include('inc', 'twitter_archive');

    // Some failed requests and related statuses are added to the queue, too.
    $queue = DrupalQueue::get('twitter_archive');

    try {
      $data = twitter_archive_statuses_show($record['id'], $record['twitter_uid']);
    }
    catch (TwitterException $e) {
      $error = $e->getMessage();
      if ($error == 'Too Many Requests') {
        $queue->createItem($record);
      }
    }

    if ($data) {

      $record['data'] = $data;
      $record['archived'] = time();
      drupal_write_record('twitter_archive', $record);

      // If the Twitter status hasn't already been saved, capture it. Because the
      // archive record was already saved, it will not generate a new queue task.
      if (!twitter_status_load($record['id'])) {
        $status = new TwitterStatus($data);
        if (!twitter_account_load($status->user->id)) {
          twitter_account_save($status->user);
        }
        twitter_status_save($status);
      }

      // Archive related statuses. Capture the tweet this replies to and the
      // original tweet for retweets.
      if ($data['in_reply_to_status_id']) {

        // Queue a task to capture the status this one replies to using authenticated
        // account where possible.
        $new_record = array('id' => $data['in_reply_to_status_id'], 'twitter_uid' => 0);
        if ($record['twitter_uid']) {
          $new_record['twitter_uid'] = $record['twitter_uid'];
        }
        else if (twitter_archive_account_is_auth($data['in_reply_to_user_id'])) {
          $new_record['twitter_uid'] = $data['in_reply_to_user_id'];
        }
        $queue->createItem($new_record);
      }
      if (isset($data['retweeted_status'])) {

        // Retweets are always unprotected and can always be retrieved without
        // authentication.
        $new_record = array('id' => $data['retweeted_status']['id'], 'twitter_uid' => 0);
        $queue->createItem($new_record);
      }
    }
  }
}
