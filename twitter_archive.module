<?php

/**
 * Determine if the Twitter user ID is authenticated.
 */
function twitter_archive_account_is_auth($twitter_uid) {
  if ($account = twitter_account_load($twitter_uid)) {
    return $account->is_auth();
  }
}

/**
 * Implements hook_twitter_status_save().
 */
function twitter_archive_twitter_status_save($status) {
  module_load_include('inc', 'twitter');
  $is_auth = FALSE;

  // Prefer to load tweets with their authors' credentials.
  $twitter_uid = db_select('twitter_account')
    ->fields('twitter_account', array('twitter_uid'))
    ->condition('screen_name', $status->user->screen_name)
    ->execute()
    ->fetchField();
  $is_auth = twitter_archive_account_is_auth($twitter_uid);

  // Tweets being saved may be mentions, in which case we have credentials for
  // in_reply_to_user_id.
  if (!$is_auth) {
    $twitter_uid = $status->in_reply_to_user_id;
    $is_auth = twitter_archive_account_is_auth($twitter_uid);
  }

  // Archive requests a status ID with specific credentials if available. This array
  // becomes the record that is saved in the archive table. If there is no authenticated
  // for making the request, the request will be anonymous and unauthenticated.
  $record = array(
    'id' => $status->id,
    'twitter_uid' => $is_auth ? (int) $twitter_uid : 0,
  );

  $update = db_select('twitter_archive', 'ta')
    ->condition('id', $record['id'])
    ->condition('twitter_uid', $record['twitter_uid'])
    ->countQuery()
    ->execute()
    ->fetchField();

  if (!$update) {
    $queue = DrupalQueue::get('twitter_archive');
    $queue->createItem($record);
  }
}

/**
 * Cron queue worker callback.
 */
function twitter_archive($record) {
  $update = db_select('twitter_archive', 'ta')
    ->condition('id', $record['id'])
    ->condition('twitter_uid', $record['twitter_uid'])
    ->countQuery()
    ->execute()
    ->fetchField();

  if (!$update) {
    $data = $record['data'] = twitter_archive_statuses_show($record['id'], $record['twitter_uid']);
    $record['archived'] = time();
    drupal_write_record('twitter_archive', $record);

    $extra_statuses = array();
    if ($data['in_reply_to_status_id']) {
      $extra_statuses[] = twitter_archive_statuses_show($data['in_reply_to_status_id'], $data['in_reply_to_user_id']);
    }
    if (isset($data['retweeted_status'])) {
      $extra_statuses[] = twitter_archive_statuses_show($data['retweeted_status']['id'], $data['retweeted_status']['user']['id']);
    }
    foreach (array_filter($extra_statuses) as $extra_status) {
      twitter_status_save(new TwitterStatus($extra_status));
    }
  }
}

/**
 * Function to retrieve Twitter status using authorization if possible.
 */
function twitter_archive_statuses_show($id, $twitter_uid) {
  if ($twitter_uid && $account = twitter_account_load($twitter_uid)) {
    $twitter = twitter_connect($account->is_auth() ? $account : NULL);
  }
  else {
    $twitter = twitter_connect();
  }
  $params = array(
    'id' => $id,
    'include_entities' => 'true',
  );
  return $twitter->call('statuses/show', $params, 'GET');
}

/**
 * Implements hook_cron_queue_info().
 */
function twitter_archive_cron_queue_info() {
  $queues['twitter_archive'] = array(
    'worker callback' => 'twitter_archive',
  );
  return $queues;
}
